{"version":3,"sources":["services/request.js","utils/functions.js","components/Container.js","components/InputLogin.js","components/Button.js","screens/login/styled.js","screens/login/Component.js"],"names":["loginRequest","data","axios","url","END_POINT","method","getMessages","params","validateTextField","text","trim","length","ContainerBox","styled","div","Container","props","children","rest","InputContainer","GRAY_1","GRAY_2","MAX_WIDTH","InputBox","input","GRAY_INPUT_TEXT","GRAY_3","InputLogin","ButtonBox","button","GREEN_PRIMARY","WHITE","Button","TitleLogin","ButtonLogin","ContainerLogin","FormLogin","form","LoginScreen","useState","loading","setLoading","navigate","useNavigate","Loading","visible","onSubmit","event","preventDefault","FormData","target","username","get","roomId","then","res","replace","state","catch","err","alert","response","msg","placeholder","type","name"],"mappings":"iGAAA,iGAGO,SAASA,EAAaC,GAC3B,OAAOC,IAAM,CACXC,IAAI,GAAD,OAAKC,IAAL,UACHC,OAAQ,OACRJ,SAIG,SAASK,EAAYL,GAC1B,OAAOC,IAAM,CACXC,IAAI,GAAD,OAAKC,IAAL,aACHC,OAAQ,MACRE,OAAQN,M,gCCVL,SAASO,EAAkBC,GAEhC,QADgBA,EAAKC,OACRC,OAPf,mC,oFCcA,IAAMC,EAAeC,IAAOC,IAAV,qHAOHC,IAZf,SAAmBC,GAAQ,IACjBC,EAAsBD,EAAtBC,SAAaC,EADG,YACMF,EADN,cAExB,OAAO,cAACJ,EAAD,2BAAkBM,GAAlB,aAAyBD,O,oHCSlC,I,EAAME,EAAiBN,IAAOC,IAAV,wPAIEM,IACAC,IAIPC,KAITC,EAAWV,IAAOW,MAAV,mOACHC,IAQEC,KAQEC,EAxCf,SAAoBX,GAAQ,IACfE,EADc,iBACLF,GAEpB,OACE,cAACG,EAAD,UACE,cAACI,EAAD,eAAcL,O,gCCApB,I,QAAMU,EAAYf,IAAOgB,OAAV,4SACOC,IAMXC,IAGIT,KASAU,EAxBf,SAAgBhB,GAAQ,IACdC,EAAsBD,EAAtBC,SAAaC,EADA,YACSF,EADT,cAErB,OAAO,cAACY,EAAD,2BAAeV,GAAf,aAAsBD,M,QCRlBgB,EAAapB,IAAOC,IAAV,8JASVoB,EAAcrB,YAAOmB,EAAPnB,CAAH,iDAIXsB,EAAiBtB,YAAOE,IAAPF,CAAH,gDAIduB,EAAYvB,IAAOwB,KAAV,6ICkCPC,UA3Cf,WAAwB,IAAD,EACSC,oBAAS,GADlB,mBACdC,EADc,KACLC,EADK,KAGfC,EAAWC,cAyBjB,OACE,eAACR,EAAD,WACE,cAACS,EAAA,EAAD,CAASC,QAASL,IAClB,eAACJ,EAAD,CAAWU,SA1BK,SAACC,GACnBA,EAAMC,iBACN,IAAM/C,EAAO,IAAIgD,SAASF,EAAMG,QAC1BC,EAAWlD,EAAKmD,IAAI,YACpBC,EAASpD,EAAKmD,IAAI,UAEnB5C,YAAkB2C,IAAc3C,YAAkB6C,IAGrDZ,GAAW,GAEXzC,YAAa,CAAEmD,WAAUE,WACtBC,MAAK,SAACC,GACLd,GAAW,GACXC,EAAS,QAAS,CAAEc,SAAS,EAAMC,MAAO,CAAEN,WAAUE,eAEvDK,OAAM,SAACC,GACNlB,GAAW,GACXmB,MAAMD,EAAIE,SAAS5D,KAAK6D,SAX5BF,MAAM,mCAmBN,UACE,cAAC3B,EAAD,4BAEA,cAAC,EAAD,CAAY8B,YAAY,WAAWC,KAAK,OAAOC,KAAK,aACpD,cAAC,EAAD,CAAYF,YAAY,UAAUC,KAAK,OAAOC,KAAK,WAEnD,cAAC/B,EAAD,CAAa8B,KAAK,SAAlB","file":"static/js/5.03490106.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport { END_POINT } from \"constants/variables\";\r\n\r\nexport function loginRequest(data) {\r\n  return axios({\r\n    url: `${END_POINT}/login`,\r\n    method: \"POST\",\r\n    data,\r\n  });\r\n}\r\n\r\nexport function getMessages(data) {\r\n  return axios({\r\n    url: `${END_POINT}/messages`,\r\n    method: \"GET\",\r\n    params: data,\r\n  });\r\n}\r\n","/**\r\n * Validate field text, not empty\r\n * @param {*} text\r\n * @returns {Boolean}\r\n */\r\nexport function validateTextField(text) {\r\n  const newText = text.trim();\r\n  if (!newText.length) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * Container Component\r\n * @typedef PropTypes\r\n * @param {React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>} props\r\n * @returns\r\n */\r\nfunction Container(props) {\r\n  const { children, ...rest } = props;\r\n  return <ContainerBox {...rest}>{children}</ContainerBox>;\r\n}\r\n\r\nconst ContainerBox = styled.div`\r\n  max-width: 800px;\r\n  //padding: 0px 8px;\r\n  margin-right: auto;\r\n  margin-left: auto;\r\n`;\r\n\r\nexport default Container;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { GRAY_1, GRAY_2, GRAY_3, GRAY_INPUT_TEXT } from \"constants/colors\";\r\nimport { MAX_WIDTH } from \"constants/variables\";\r\n\r\n/**\r\n * InputLogin Component\r\n * @param {React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>} props\r\n * @returns {JSX.Element}\r\n */\r\nfunction InputLogin(props) {\r\n  const { ...rest } = props;\r\n\r\n  return (\r\n    <InputContainer>\r\n      <InputBox {...rest} />\r\n    </InputContainer>\r\n  );\r\n}\r\n\r\nconst InputContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: ${GRAY_1};\r\n  border: 1px solid ${GRAY_2};\r\n  border-radius: 8px;\r\n  margin-bottom: 16px;\r\n  width: 100%;\r\n  max-width: ${MAX_WIDTH};\r\n  padding: 8px;\r\n`;\r\n\r\nconst InputBox = styled.input`\r\n  color: ${GRAY_INPUT_TEXT};\r\n  width: 100%;\r\n  margin: 8px;\r\n  font-size: 16px;\r\n  background-color: transparent;\r\n  border: none;\r\n\r\n  ::placeholder {\r\n    color: ${GRAY_3};\r\n  }\r\n\r\n  :focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport default InputLogin;\r\n","import React from \"react\";\r\nimport { GREEN_PRIMARY, WHITE } from \"constants/colors\";\r\nimport { MAX_WIDTH } from \"constants/variables\";\r\nimport styled from \"styled-components\";\r\n\r\n/**\r\n * Button Component\r\n * @param {React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>} props\r\n * @returns {JSX.Element}\r\n */\r\nfunction Button(props) {\r\n  const { children, ...rest } = props;\r\n  return <ButtonBox {...rest}>{children}</ButtonBox>;\r\n}\r\n\r\nconst ButtonBox = styled.button`\r\n  background-color: ${GREEN_PRIMARY};\r\n  padding: 16px;\r\n  font-size: 16px;\r\n  outline: none;\r\n  box-shadow: none;\r\n  border: none;\r\n  color: ${WHITE};\r\n  font-weight: bold;\r\n  border-radius: 100px;\r\n  max-width: ${MAX_WIDTH};\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  :focus {\r\n    outline: 0;\r\n  }\r\n`;\r\n\r\nexport default Button;\r\n","import Button from \"components/Button\";\r\nimport Container from \"components/Container\";\r\nimport styled from \"styled-components\";\r\n\r\nexport const TitleLogin = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  font-size: 32px;\r\n  font-weight: bold;\r\n  margin: 32px 0;\r\n  text-align: center;\r\n`;\r\n\r\nexport const ButtonLogin = styled(Button)`\r\n  margin-top: 50px;\r\n`;\r\n\r\nexport const ContainerLogin = styled(Container)`\r\n  padding: 0 16px;\r\n`;\r\n\r\nexport const FormLogin = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`;\r\n","import React, { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport InputLogin from \"components/InputLogin\";\r\nimport Loading from \"components/Loading\";\r\nimport { loginRequest } from \"services/request\";\r\nimport { validateTextField } from \"utils/functions\";\r\nimport { ButtonLogin, ContainerLogin, FormLogin, TitleLogin } from \"./styled\";\r\n\r\n/**\r\n * SignIn Screen\r\n * @returns {JSX.Element}\r\n */\r\nfunction LoginScreen() {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const hanleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.target);\r\n    const username = data.get(\"username\");\r\n    const roomId = data.get(\"roomId\");\r\n\r\n    if (!validateTextField(username) || !validateTextField(roomId)) {\r\n      alert(\"Please enter full information!\");\r\n    } else {\r\n      setLoading(true);\r\n\r\n      loginRequest({ username, roomId })\r\n        .then((res) => {\r\n          setLoading(false);\r\n          navigate(\"/chat\", { replace: true, state: { username, roomId } });\r\n        })\r\n        .catch((err) => {\r\n          setLoading(false);\r\n          alert(err.response.data.msg);\r\n        });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ContainerLogin>\r\n      <Loading visible={loading} />\r\n      <FormLogin onSubmit={hanleSubmit}>\r\n        <TitleLogin>Join Chatroom</TitleLogin>\r\n\r\n        <InputLogin placeholder=\"Username\" type=\"text\" name=\"username\" />\r\n        <InputLogin placeholder=\"Room ID\" type=\"text\" name=\"roomId\" />\r\n\r\n        <ButtonLogin type=\"submit\">JOIN</ButtonLogin>\r\n      </FormLogin>\r\n    </ContainerLogin>\r\n  );\r\n}\r\n\r\nexport default LoginScreen;\r\n"],"sourceRoot":""}